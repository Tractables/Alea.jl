#!/usr/bin/env python3
from dataclasses import dataclass
from typing import Callable

@dataclass
class Row:
    header: str
    cells: list[str]

    @staticmethod
    def of_line(s: str) -> "Row":
        assert s[-1] == "\n", s
        header, *cells = s[:-1].split("\t")
        assert len(cells) == 10, s
        return Row(header, cells)
    
    def to_line(self, cell_sep="\t") -> str:
        return cell_sep.join([self.header] + self.cells) + " \\\\\n"
    
    def map_cells(self, f: Callable[[str],str]) -> "Row":
        return Row(self.header, [f(cell) for cell in self.cells])

    def imap_cells(self, f: Callable[[int, str],str]) -> "Row":
        return Row(self.header, [f(i, cell) for (i, cell) in enumerate(self.cells)])
    
    def map(self, f: Callable[[str],str]) -> "Row":
        return Row(f(self.header), [f(cell) for cell in self.cells])

csv_name = "figs/rbt-ablation"

def fmt(i, cell):
    f = float(cell)

    if f == 0:
        return "-"

    color_bot = 255, 255, 255
    color_mid = 201, 226, 190
    color_top = 147, 196, 125
    if i % 2 == 1:
        color_mid = 245, 204, 204
        color_top = 234, 153, 153

    bot = 0
    mid = 6
    top = 100

    def interp(color_low, color_high, pct):
        return tuple(a + (b - a) * pct for a, b in zip(color_low, color_high)) 
    
    # move 0 up to .1 to make small values more visible
    def squishup(f, b=0.2):
        return b + (1 - b) * f

    if bot <= f < mid:
        color = interp(color_bot, color_mid, squishup((f - bot) / (mid - bot)))
    else:
        assert mid <= f <= top
        color = interp(color_mid, color_top, squishup((f - mid) / (top - mid)))

    return f"\\cellcolor[rgb]{{ {color[0]/255:.03f} {color[1]/255:.03f} {color[2]/255:.03f} }} {f:.1f}"

def csv_lines_to_tex_lines(lines):
    rows = [Row.of_line(line).imap_cells(fmt) for line in lines]
    return [
        row.to_line(" & ") 
        for row in rows
    ]

with open(f"{csv_name}.csv", "r") as csv:
    with open(f"{csv_name}.tex", "w") as tex:
        tex.write("%% generated by figs/rbt-ablation-to-tex.py\n")
        tex.writelines(csv_lines_to_tex_lines(csv.readlines()))
        tex.write("\\bottomrule\n")
